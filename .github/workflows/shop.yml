name: Telegram bot CI/CD

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set execute permissions for Gradle Wrapper
        run: chmod +x ./gradlew
      - name: Build and Test
        run: ./gradlew build
        env:
          token: ${{ secrets.TOKEN }}
      - name: Upload JAR
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true))
        uses: actions/upload-artifact@v2
        with:
          name: shop
          path: build/libs/tg_bot-0.0.1-SNAPSHOT.jar

  deploy-to-aws:
    if: github.ref == 'refs/heads/main'
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR
        uses: actions/download-artifact@v2
        with:
          name: shop
          path: ./build/libs/

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Find jar
        run: |
          echo "In general"
          ls -la
          echo "In build"
          cd ./build
          ls -la
          echo "In build/libs"
          cd ./libs
          ls -la

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
          registry-type: private
          skip-logout: false

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build --progress=plain -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image_tag::$IMAGE_TAG"

      - name: Replace secrets in task-definition.json
        run: |
          sed -i 's|CONTAINER_IMAGE_PLACEHOLDER|${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest|g' task-definition.json
          sed -i 's|EXECUTION_ROLE_ARN_PLACEHOLDER|${{ secrets.EXECUTION_ROLE_ARN }}|g' task-definition.json

      - name: Update ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ShopCluster

      - name: Install jq
        if: always()
        run: sudo apt-get install jq

      - name: Delete artifacts
        if: always()
        run: |
          echo "Deleting artifacts..."
          ARTIFACT_ID=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/tapok332/tg_bot/actions/artifacts | jq '.artifacts[] | select(.name=="shop") | .id')
          curl -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/tapok332/tg_bot/actions/artifacts/$ARTIFACT_ID